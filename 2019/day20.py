import numpy as np
import copy
import sys

sys.setrecursionlimit(100000)

letters = [chr(x) for x in range(ord('A'), ord('Z') + 1)]
ports = []
inp = """                               F             G   R F   Q     J           N   G                                       
                               A             T   T M   L     N           K   Z                                       
  #############################.#############.###.#.###.#####.###########.###.#####################################  
  #.#.#...#.#...#.#.#.....#.#.#.....#.........#.....#.#...#.#.......#.....#.........#...#.#...................#.#.#  
  #.#.###.#.###.#.#.#####.#.#.###.###.#.#########.###.#.#.#.###.###.###.###.###.###.###.#.#.#.###.#.###.#####.#.#.#  
  #.....#.....#.....#.#.....#.#...#.#.#.#...........#...#.#...#.#.#.#...#...#.....#.........#.#.#.#.#...#...#.#...#  
  ###.#####.#####.###.#####.#.#.###.###.###.###.#.#.###.#.#.#####.#.#.#####.#.#####.#######.###.#######.#.#######.#  
  #.....#.#.#.#.......................#...#...#.#.#.#...#.#.#...#...#.....#.#...#.#...#.#.#.#.....#.#...#.....#...#  
  ###.###.#.#.###.###.###.#.#.#.#.###.###.#####.#####.#####.###.#.###.#.###.#####.#.###.#.###.#####.#######.###.###  
  #.....#...#.#...#.#.#...#.#.#.#...#.#...#.#.......#...........#...#.#...#.#.#.................#...#.........#.#.#  
  #####.###.#.#####.#####.#.#####.###.#.###.###.#########.#.#######.###.#####.#####.###.#.#.#####.###########.#.#.#  
  #...#.....#.....#.#...#.#.#.#.#.#...#...#.......#.....#.#.#.#.#...#...#...#.#.....#.#.#.#.#.......#...#.#...#...#  
  ###.###.#.###.#.#.###.#.###.#.#.###.#.#######.#####.#####.#.#.#.#####.###.#.#####.#.###.#.#.#######.###.###.#.#.#  
  #.#.#...#...#.#...#.......#.#.#.#.#.#...#.#.......#.........#.#...#.#.......#.....#.#.#.#.........#.#.#.......#.#  
  #.#.#.#.#######.###.###.###.#.#.#.#.#.###.#.#.#####.#.###.###.###.#.#.###.###.#.#.#.#.#####.#.#####.#.###.#######  
  #...#.#.#.#.........#.....#.#...#...#.#.#.#.#...#.#.#.#.......#.....#.#...#...#.#.....#...#.#...#.#...#.....#.#.#  
  ###.###.#.###.#.#.#.#######.###.###.#.#.#.#####.#.#.###.#.#######.###.###.#######.###.#.#.#####.#.#.#####.###.#.#  
  #.#.......#...#.#.#...#.#.#.#...#...#.#.....#.....#...#.#...#.#.#...#.#.....#...#...#...#...#.#.#.....#...#.#...#  
  #.###.###.#############.#.#.#######.#.#.#.###.#####.#####.#.#.#.#.#######.###.#.#.#######.###.###.#.#####.#.###.#  
  #.#.....#.#...........#.........#.#.#...#.#.#...#.......#.#.#.......#.#.....#.#.......#.#.#...#.#.#.#.#.......#.#  
  #.###.###############.#####.#.###.#.#.#####.#.#####.#####.#.###.#####.#.#####.###.#####.#####.#.#.###.###.#####.#  
  #...#.#.#.#.........#.#...#.#.#.#...#.....#.#.....#...#.#.#.#.....#...#.....#...#.............#...#.#...#.#.....#  
  ###.#.#.#.#.#####.###.###.#.###.#.#####.###.#.###.#.###.###.#####.###.###.#.#.#####.#######.#.#.#.#.#.###.#####.#  
  #.#.....#.#.#.#.......#.........#...#.#.#.#.....#.#...#.#.#.#.....#.......#.#.....#.......#.#.#.#.#...#...#.#...#  
  #.#####.#.###.#.###.#######.#.#.###.#.#.#.###.#####.#.#.#.#####.#####.###.#.###.#############.###.###.###.#.#.###  
  #.....#.#.....#.#.....#.....#.#...#.#.......#.#.#...#.#.#.#.......#.....#.#.#.....#.#...#...#.#...#...#.........#  
  ###.###.#.#####.###.#########.###.#.#.#.#.###.#.###.###.#.###.#.#######.###.#####.#.#.###.#######.###.#######.#.#  
  #.#...#.#...#.#.#.....#.#.......#...#.#.#.#.......#.........#.#.#.........#.#...............#.#.#...#...#...#.#.#  
  #.#.###.#.###.#.#####.#.#######.#####.#######.#.#######.#######.#####.###########.#########.#.#.#.###.###.#####.#  
  #...#.#...#.#...#.#.#.#.#.#    D     R       Z K       F       G     Z           B    #.#.#.#.#.#...#.....#.#...#  
  ###.#.###.#.###.#.#.###.#.#    Y     T       Q T       A       T     I           P    #.#.###.#.#.#######.#.###.#  
VE..#...............#.....#.#                                                           #.#.#.#.#...#.#.#.#...#...#  
  #.#.###.#.#.#.#.#.#.###.#.#                                                           #.#.#.#.###.#.#.#.#.#####.#  
  #.....#.#.#.#.#.#...#...#..OJ                                                         #.#.#.#.#...#.#...#.#.#...#  
  #.###.#.#######.###.#.###.#                                                           #.#.#.#.#.###.#.###.#.###.#  
  #...#.#.#...#.#...#.#.#...#                                                         VE......#...............#....DU
  #####.#####.#.#######.#.###                                                           #.#.#.#.###.#.###.###.#.###  
  #.#.#.....#...#.#.#.....#.#                                                           #.#.#.....#.#...#.#...#...#  
  #.#.#.#.#####.#.#.#######.#                                                           #.#.#.###.#.#.#######.#.#.#  
  #.#.#.#.#...#...#.#.#.#....UR                                                         #.#.#.#...#.#.#.......#.#.#  
  #.#.#####.###.###.#.#.###.#                                                           #.###.#######.###.###.###.#  
  #...#.......#.#...#.#.#.#.#                                                           #.#.#.#.#...#.#.#.#.......#  
  ###.#####.###.###.#.#.#.#.#                                                           #.#.###.###.###.###########  
  #.....#...#.....#.#...#...#                                                           #.#.....#...............#.#  
  #.#.###.###.###.#.###.###.#                                                           #.#.###.#.###.#####.#.###.#  
UF..#.........#.#...........#                                                           #.#.#.....#.....#...#......GE
  #############.#######.#####                                                           #######.###.#.#########.###  
  #.....#.............#.#...#                                                           #...#...#.#.#.#...#...#...#  
  #.#.#.#.###.#####.#######.#                                                           ###.###.#.#######.###.#.###  
  #.#.#.....#.#.....#.....#..OI                                                       MN........#...#.#.#...#.#.#.#  
  #.###.###.#####.###.###.#.#                                                           #.#.#######.#.#.#.###.###.#  
  #.#.#...#...#.......#...#.#                                                           #.#...#.....#...#...#......ZI
  #.#.#####.#########.#.###.#                                                           ###.#.#.###.#.#.#.#.#.#.###  
DR....#.....#.#...#.#.#.....#                                                           #.#.#.#...#...#...#...#...#  
  ###########.#.###.#######.#                                                           #.#######.#.#####.#########  
DL......#.#...............#.#                                                           #.......#.#.#.....#.#...#.#  
  ###.#.#.###.###########.###                                                           ###.#.###.#######.#.#.###.#  
  #...#.#...#...#.....#...#.#                                                         OH....#.....#.#.#.#.#.....#.#  
  #.#####.#.#.#######.#.###.#                                                           #.#.#.#####.#.#.#####.###.#  
  #.....#.#...#.........#....JD                                                         #.#.#.#...................#  
  #.#.###.#.#.###.###.###.###                                                           #########.###.###.#####.#.#  
  #.#.....#.#...#.#.........#                                                           #...#.......#.#.....#.#.#.#  
  ###.#.#####.###############                                                           #.#.#######.###.#####.#.###  
  #...#.#.......#.#...#.....#                                                           #.#.......#.#.#.#.#...#...#  
  #.#####.#.#####.#.###.#.###                                                           #.#####.###.#.###.#.#.#.#.#  
  #...#.#.#.#...#.#.....#.#.#                                                         WP..#...........#...#.#.#.#..OJ
  #####.#####.###.###.###.#.#                                                           #####.#.###.#.###.###.#####  
UR..#.......#.#.#.#.#...#....DL                                                       GE....#.#...#.#.#...........#  
  #.#.###.###.#.#.#.###.###.#                                                           #.#.###.#####.#.#.#.###.#.#  
  #.....#...............#...#                                                           #.#...#...#.#.#.#.#...#.#..OI
  #############.###.#.###.###                                                           #.#.#.#####.#########.###.#  
  #.#.#.#.#...#...#.#...#...#                                                           #.#.#...#...#.......#.#.#.#  
  #.#.#.#.#.#.###.###########                                                           #######.###.###.###.#.#.###  
KG........#.#.#.#.#.......#.#                                                           #...#.#.........#.........#  
  #.###.###.#.#.###.#######.#                                                           #.###.#########.#.#.###.###  
AA..#.......#................JN                                                         #.............#.#.#...#...#  
  #.#########################                                                           #.###########.#####.#######  
  #.#.#...........#.........#                                                         QL....#...#.......#.#...#.#..ZQ
  ###.#.#########.###.#####.#                                                           #####.#.#.#.#####.#.###.#.#  
KT..........#.........#...#.#                                                           #.#...#...#.#.#.#...#...#.#  
  #.###.#.#.#.###.#####.###.#                                                           #.#.###########.#######.#.#  
  #.#...#.#.#...#...#.#.....#                                                           #.........................#  
  #####.#.#.#.#.#.###.#.#####                                                           #.###.###.#.#.#.###.#.#####  
  #.....#.#.#.#.#...#........UF                                                         #...#...#.#.#.#.#...#.....#  
  #.#####.#######.###.#.###.#                                                           #.###.#.###.###.###.#####.#  
  #.....#.....#...#...#.#...#                                                           #...#.#.#...#.#.#.......#.#  
  #.#.#####.#######.#######.#            F       G       N D         K       D          #.###.#####.#.#####.#.###.#  
  #.#...#.......#.........#.#            M       Z       K R         G       U          #...#.#.......#.#.#.#...#.#  
  #.#.#.#.#.#.#.###.#.###.###############.#######.#######.#.#########.#######.###########.###.#.###.###.#.#.#####.#  
  #.#.#.#.#.#.#...#.#.#...#.......#.........#.....#.......#.#.#.......#...#...........#.#.#...#...#.#...........#.#  
  #.#####.#.#.#####.###########.#########.###.###.#.#.#.###.#.#####.###.#.###.#####.###.#####.###.#####.#.#######.#  
  #.#.#...#.#...#.#.#.....#.......#.......#...#.#.#.#.#.#.#.#.#.#...#...#.#.....#...#...#.....#.....#.#.#.#.......#  
  #.#.#######.#.#.###.#.#######.###.#########.#.#.#.#.###.#.#.#.###.#.###.#.#######.#.###.#######.###.###.###.#.#.#  
  #.#.........#.#...#.#.#...#.......#.....#...#...#.#.#.........#.......#.#...#.#.#.#...#.#.#.#.....#.#...#.#.#.#.#  
  #####.###.###.###.###.#.#####.###.#.###.#####.###.#######.#############.###.#.#.###.#####.#.###.###.###.#.###.#.#  
  #.......#...#.#.#.............#.....#.....#.#...#.#.....#.....#...#.......#...........#.............#...#.....#.#  
  #.#.###.###.#.#.###.#.#.#.#####.#######.###.#.#.#.#.#.###.#######.###.#.#######.#######.###.#.#.#######.###.#.#.#  
  #.#...#.#...#.#.....#.#.#.#.......#.#...#.#.#.#.#...#.#.#.#.#...#.....#...#.#.#.......#...#.#.#...#.......#.#.#.#  
  #.#.###.#######.###.#######.###.###.###.#.#.###.#####.#.#.#.###.#.#.#.###.#.#.#.#.#########.###########.#.###.#.#  
  #.#.#...#.#.....#.....#.......#.#.....#...#.....#.....#.......#...#.#...#.#.....#.....#.#.#.#.........#.#.#...#.#  
  #.#.#####.#######.#####.#.###########.#.#####.#.#.###.#.#.#.#.#.#.###.#######.#.#.#####.#.#######.###.###.#####.#  
  #.#.#...#...#.#...#.#...#.#.....#.#.#.#.#.....#.#...#.#.#.#.#.#.#.#...#.#...#.#.#.#.#...#.#...#...#...........#.#  
  #.###.###.#.#.#####.#.#####.###.#.#.#.#.#####.###.###########.###.#####.#.#####.###.#.###.#.#######.#.#.#####.###  
  #.#...#.#.#.#.....#.#.#...#.#...#.....#.#...#.#.....#...#.#.#...#...#.#.......#.............#.#.....#.#...#.#...#  
  #####.#.###.###.###.###.#####.#.#.###.#.#.#.#.###.###.###.#.###.#.###.###.###.#.###.#####.#.#.#######.###.#.#.#.#  
  #.#...................#.#.#...#...#.#.#.#.#.#...#.#...#.#.#.....#.#.#.#.....#...#.#.#.#.#.#.....#.......#.#.#.#.#  
  #.###.#####.#.#######.#.#.#######.#.#.#.#.#.#.###.#.#.#.#.#####.#.#.#.#.#.#.#####.###.#.#.#####.#####.#.###.#.###  
  #.....#.....#.#.#...#.............#.#...#.#...#...#.#.......#...#.....#.#.#...#.........#...#.#...#.#.#.#...#...#  
  ###.#######.#.#.###.#######.#####.#.#####.#######.#.#.#######.#####.#.#####.#####.#.###.#.###.###.#.###.###.#####  
  #...#...#...#.#...#.#.....#...#.#...#...#.......#...#...#.#.#...#...#...#.......#.#.#...#.....#...#...........#.#  
  #.#.###.#######.###.#####.#####.###.#.#.#.###.###.###.###.#.###.#.###########.###.#########.###.###.#.###.#####.#  
  #.#.#...........#...................#.#.#.#.....#.#.....#...#...#...#...#...#...#.........#.#...#...#.#.........#  
  #.#.#.#########.#.###.###.#.#.#.#.###.#.###.#####.###.###.###.###.###.###.#.###.#.#########.#########.#.###.###.#  
  #.#.#.#.............#...#.#.#.#.#.....#...#.....#.#...#.........#.......#.#...............#.........#.#.#.....#.#  
  #######################################.#####.#####.#######.###.#####.###.#######################################  
                                         O     J     W       Z   B     D   M                                         
                                         H     D     P       Z   P     Y   N                                         """

grid = []
for i, row in enumerate(inp.split('\n')):
    grid.append([j for j in row])

while True:
    flg = False
    for j, row in enumerate(grid):
        for i, tile in enumerate(row):
            if tile == '.':
                try:
                    up = grid[j - 1][i] == '#'
                    down = grid[j + 1][i] == '#'
                    left = grid[j][i - 1] == '#'
                    right = grid[j][i + 1] == '#'
                    result = sum([up, down, left, right])
                    if result >= 3:
                        flg = True
                        grid[j][i] = '#'
                except IndexError:
                    pass
    if not flg:
        break


def display(grids):
    for idx, gds in enumerate(grids):
        print(idx)
        for i in gds:
            for j in i:
                print(j, end='')
            print("")


for y, row in enumerate(grid):
    for x, t in enumerate(row):
        one = row[x]
        try:
            two = row[x+1]
        except IndexError:
            two = 0

        if (one in letters) and (two in letters):
            try:
                if row[x+2] == '.':
                    if x-3 > 0:
                        ports.append([f'{one}{two}', (y, x + 2), (y, x + 1), 1])
                    else:
                        ports.append([f'{one}{two}',(y, x+2), (y, x+1), -1])
            except IndexError:
                pass
            try:
                if row[x-1] == '.':
                    try:
                        print(row[x+3])
                        ports.append([f'{one}{two}',(y, x-1), (y, x), 1])
                    except IndexError:
                        ports.append([f'{one}{two}', (y, x - 1), (y, x), -1])
            except IndexError:
                pass

for y, row in enumerate(grid):
    for x, t in enumerate(row):
        one = grid[y][x]
        try:
            two = grid[y+1][x]
        except IndexError:
            two = 0
        if (one in letters) and (two in letters):
            try:
                if grid[y+2][x] == '.':
                    if y-3 > 0:
                        ports.append([f'{one}{two}', (y + 2, x), (y + 1, x), 1])
                    else:
                        ports.append([f'{one}{two}',(y+2, x), (y+1, x), -1])
            except IndexError:
                pass
            try:
                if grid[y-1][x] == '.':
                    try:
                        print(grid[y+3])
                        ports.append([f'{one}{two}',(y-1, x), (y, x), 1])
                    except IndexError:
                        ports.append([f'{one}{two}',(y-1, x), (y, x), -1])
            except IndexError:
                pass

portals = {}
for l1 in ports:
    for l2 in [p for p in ports if p != l1]:
        if l1[0] == l2[0]:
            portals[l1[0]] = [[l1[1], l1[2], l1[3]], [l2[1], l2[2], l2[3]]]


grids = [copy.deepcopy(grid) for i in range(50)]

coords = [75, 2]
#display(grids)
#coords = [34, 15]

def search(org_mode, a, b, org_steps, layer):
    #display(grids)
    l = layer
    y, x = a, b
    mode = org_mode
    steps = org_steps
    if grids[l][y][x] in ['#', ' ']:
        return False
    elif grids[l][y][x] in letters:
        if grids[l][y+1][x] in letters:
            let1, let2 = grids[l][y][x], grids[l][y + 1][x]
        elif grids[l][y-1][x] in letters:
            let2, let1 = grids[l][y][x], grids[l][y - 1][x]
        elif grids[l][y][x+1] in letters:
            let1, let2 = grids[l][y][x], grids[l][y][x + 1]
        elif grids[l][y][x-1] in letters:
            let2, let1 = grids[l][y][x], grids[l][y][x - 1]


        if f'{let1}{let2}' == 'AA':
            return False
        elif f'{let1}{let2}' == 'ZZ':
            #display(grids)
            if l == 0:
                print("NICE")
                #display(grids)
                return True
            else:
                return False

        crds = portals[f'{let1}{let2}']

        if crds[0][1] == (y, x):
            if l == 0 and crds[0][2] == -1:
                return False
            y = crds[1][0][0]
            x = crds[1][0][1]
            l += crds[0][2]
        elif crds[1][1] == (y, x):
            if l == 0 and crds[1][2] == -1:
                return False
            y = crds[0][0][0]
            x = crds[0][0][1]
            l += crds[1][2]

        try:
            if grids[l][y+1][x] in letters:
                mode = -1
            elif grids[l][y-1][x] in letters:
                mode = 1
            elif grids[l][y][x+1] in letters:
                mode = -2
            elif grids[l][y][x-1] in letters:
                mode = 2
        except:
            return False

    try:
        if steps < grids[l][y][x]:
            grids[l][y][x] = steps
        else:
            return False
    except TypeError:
        grids[l][y][x] = steps

    if (y, x) == (17, 3):
        print("H<M<M<")
    # explore neighbors
    if mode != 1:
        search(-1, y - 1, x, steps + 1, l)
    if mode != -1:
        search(1, y + 1, x, steps + 1, l)
    if mode != 2:
        search(-2, y, x - 1, steps + 1, l)
    if mode != -2:
        search(2, y, x + 1, steps + 1, l)

    return False

search(0, coords[0], coords[1], 0, 0)
display(grids)
